<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++ /opencv库学习</title>
    <link href="/ControllerTX/2025/02/19/c-learning/"/>
    <url>/ControllerTX/2025/02/19/c-learning/</url>
    
    <content type="html"><![CDATA[<h1 id="C-opencv库学习"><a href="#C-opencv库学习" class="headerlink" title="C++ &#x2F;opencv库学习"></a>C++ &#x2F;opencv库学习</h1><blockquote><p>我使用的软件是visual Studio 2022 以及opencv库版本4.8.1</p></blockquote><h2 id="在项目中配置openCV库"><a href="#在项目中配置openCV库" class="headerlink" title="在项目中配置openCV库"></a>在项目中配置openCV库</h2><p>1.创建一个新项目</p><p>2.下载好opencv库后将其解压到固定的文件夹 例如 D:\opencv</p><p>3.右击项目–属性–<img src="/ControllerTX/2025/02/19/c-learning/3.png" class="" width="3"></p><p>​3.1选择  VC++目录–包含目录–    配置如下</p><img src="/ControllerTX/2025/02/19/c-learning/3-1.png" class="" title="3-1"><p>​3.2 选择  VC++目录–库目录–    配置如下</p><img src="/ControllerTX/2025/02/19/c-learning/3-2.png" class="" title="3-2"><p>​3.3 配置链接器  选择链接器–输入–附加依赖项–  (添加opencv的lib文件路径,此处有坑!)</p><p>​选择光标位置的lib文件就好 路径: D:\opencv\build\x64\vc16\lib</p><p>​后缀d代表是debug版本,，在vs中使用debug的版本就会报错</p><img src="/ControllerTX/2025/02/19/c-learning/3-3.png" class="" title="3-3"><p>4.配置环境变量</p><p>将opencv的bin目录配置到系统环境变量中</p><blockquote><p>D:\opencv\build\x64\vc16\bin</p></blockquote><h2 id="引入opencv库"><a href="#引入opencv库" class="headerlink" title="引入opencv库"></a>引入opencv库</h2><p>​只需要在头文件中引入就好啦</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="图像的基本操作"><a href="#图像的基本操作" class="headerlink" title="图像的基本操作"></a>图像的基本操作</h2><h3 id="1-图像的读取与显示"><a href="#1-图像的读取与显示" class="headerlink" title="1.图像的读取与显示"></a>1.图像的读取与显示</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cv::<span class="hljs-built_in">imread</span>();  <span class="hljs-comment">//读取</span><br>cv::<span class="hljs-built_in">imshow</span>();  <span class="hljs-comment">//显示</span><br>cv::<span class="hljs-built_in">namedWindow</span>();  <span class="hljs-comment">//创建窗口</span><br>cv::<span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">//等待用户键入</span><br>cv::<span class="hljs-built_in">imwrite</span>(); <span class="hljs-comment">//保存图像</span><br>cv::<span class="hljs-built_in">destroyAllWindows</span>();  <span class="hljs-comment">//销毁窗口</span><br></code></pre></td></tr></table></figure><p>**tips :**如果声明了以下命名空间,则可省略函数前面的cv::</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br></code></pre></td></tr></table></figure><h3 id="2-图像的色彩空间转换"><a href="#2-图像的色彩空间转换" class="headerlink" title="2.图像的色彩空间转换"></a>2.图像的色彩空间转换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cv::<span class="hljs-built_in">cvColor</span>(); <span class="hljs-comment">//改变颜色</span><br></code></pre></td></tr></table></figure><p>使用案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">Mat src =<span class="hljs-built_in">imread</span>(<span class="hljs-string">&quot;test.jpg&quot;</span>);  <span class="hljs-comment">//原图片</span><br>Mat hsv,gray;  <span class="hljs-comment">//定义两个新图片容器</span><br><span class="hljs-comment">//将原图转化为对应的色彩格式</span><br>cv::<span class="hljs-built_in">cvCortor</span>(src,hsv,cv::COLOR_BGR2HSV);<br>cv::<span class="hljs-built_in">cvtColor</span>(src, gray, cv::COLOR_BGR2GRAY);<br><span class="hljs-comment">//展示结果</span><br>cv::<span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;HSV&quot;</span>, hsv);  <br>cv::<span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;GRAY&quot;</span>, gray); <br></code></pre></td></tr></table></figure><h3 id="3-图像对象的创建与赋值"><a href="#3-图像对象的创建与赋值" class="headerlink" title="3.图像对象的创建与赋值"></a>3.图像对象的创建与赋值</h3><blockquote><p>Mat的基本结构如下：<br>头部存放了一些属性：图像的宽高、dtype类型、通道数等；<br><strong>直接赋值创建1个新Mat对象，指针还是指向同一个Data Block；但克隆 &#x2F; 拷贝则会创建1个新的内存空间</strong></p></blockquote><h4 id="3-1图像对象的创建"><a href="#3-1图像对象的创建" class="headerlink" title="3.1图像对象的创建"></a>3.1图像对象的创建</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">cv::Mat::<span class="hljs-built_in">ones</span>();  <span class="hljs-comment">// 创建像素值全1的二维矩阵</span><br>cv::Mat::<span class="hljs-built_in">zeros</span>();  <span class="hljs-comment">// 创建像素值全0的二维矩阵</span><br>cv::<span class="hljs-built_in">Scalar</span>(<span class="hljs-number">127</span>, <span class="hljs-number">127</span>, <span class="hljs-number">127</span>); <span class="hljs-comment">// 创建标量</span><br></code></pre></td></tr></table></figure><h4 id="3-2图像对象的赋值"><a href="#3-2图像对象的赋值" class="headerlink" title="3.2图像对象的赋值"></a>3.2图像对象的赋值</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">m1</span> <span class="hljs-operator">=</span> src.clone()<span class="hljs-comment">;  // 图像拷贝克隆</span><br>src.copyTo(m2)<span class="hljs-comment">;  // 图像拷贝克隆</span><br><span class="hljs-attribute">m3</span> <span class="hljs-operator">=</span> m1<span class="hljs-comment">; // 图像拷贝克隆</span><br></code></pre></td></tr></table></figure><h4 id="3-3图像像素的读写操作"><a href="#3-3图像像素的读写操作" class="headerlink" title="3.3图像像素的读写操作"></a>3.3图像像素的读写操作</h4><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gml">src.at&lt;uchar&gt;(<span class="hljs-variable language_">y</span>, <span class="hljs-variable language_">x</span>);;  <span class="hljs-comment">// 单通道图像获取某个像素值</span><br>src.at&lt;cv::Vec3b&gt;(<span class="hljs-variable language_">y</span>, <span class="hljs-variable language_">x</span>);  <span class="hljs-comment">// RGB三通道图像获取某个像素值</span><br>src.<span class="hljs-built_in">ptr</span>&lt;uchar&gt;(<span class="hljs-variable language_">y</span>);  <span class="hljs-comment">// 获取单通道图像某一行的指针</span><br></code></pre></td></tr></table></figure><h2 id="图片的直方图均衡化处理"><a href="#图片的直方图均衡化处理" class="headerlink" title="图片的直方图均衡化处理"></a>图片的直方图均衡化处理</h2><p>1.首先导入头文件,以及命名空间,并读取原始图片</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br><span class="hljs-function">use <span class="hljs-keyword">namespace</span> cv</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Mat img = <span class="hljs-built_in">imread</span>(<span class="hljs-string">&quot;图片路径&quot;</span>)<br><span class="hljs-comment">//加上一个非空判断</span><br><span class="hljs-keyword">if</span>(img.<span class="hljs-built_in">empty</span>())&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;读取失败&quot;</span> &lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>    <span class="hljs-comment">//后续代码....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.如果图片是彩色的 我们要将图片转为灰度图片,可以在1.中第5行imread函数中添加一个参数<strong>COLOR_BGR2GRAY</strong>直接读取灰度图片,或者使用cvtColor()函数转化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">Mat grat_img;<br><span class="hljs-built_in">cvtColor</span>(img, gray_img, COLOR_BGR2GRAY);<br></code></pre></td></tr></table></figure><p>3.均衡化函数 equalizeHist(),将灰度图片均衡化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">Mat equalized_img;<br><span class="hljs-built_in">equalizeHist</span>(gray_img, equalized_img);<br></code></pre></td></tr></table></figure><p>4.结果显示 imshow()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;灰度图片&quot;</span>, gray_img);<br><span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;均衡化&quot;</span>, equalized_img);<br></code></pre></td></tr></table></figure><h2 id="直方图均衡化算法实现原理"><a href="#直方图均衡化算法实现原理" class="headerlink" title="直方图均衡化算法实现原理"></a>直方图均衡化算法实现原理</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>直方图均衡化的目的是增强图像的对比度，尤其是当图像的前景和背景对比度较低时, 它通过重新分配像素的强度值，使得图像的直方图更均匀地分布在整个强度范围内,这通常会让图像细节更明显。</p></blockquote><br/><p>直方图均衡化的核心原理是通过 <strong>重新分布像素灰度值</strong>，使得图像中各灰度级出现的概率接近均匀，从而增强图像对比度</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><strong>计算直方图</strong>：统计每个灰度级的像素数量。</li><li><strong>计算累积分布函数（CDF）</strong>：累加直方图，得到每个灰度级的累积像素数。</li><li><strong>构建查找表</strong>：根据CDF将每个灰度级映射到新值，使得分布均匀。</li><li><strong>应用映射</strong>：使用查找表转换图像的每个像素。</li></ol><h3 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h3><p>​人类眼中的图片可以是五彩斑斓的,但是计算机世界的图片类似与排列整齐的数字方阵,</p><p>例如假设人眼看到的是一只小狗图片,而计算机看到的是以下矩阵</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这样图片就类似于一个二维数组,我们就可以遍历它,获取每一个像素,以及每一个像素值出现的频率,</p><p>上图是一个4x4的图像数据,总像素数据<strong>K</strong>&#x3D;16,分别有0-7种灰度等级,我们可以统计每一种灰度等级出现的频率 <strong>n</strong></p><p>即计算直方图</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gray_leave</span>:  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br>         <span class="hljs-attribute">n</span>:  <span class="hljs-number">0</span>  <span class="hljs-number">3</span>  <span class="hljs-number">3</span>  <span class="hljs-number">6</span>  <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>现在我们来计算概率分布  计算公式为: 每种灰度等级出现的频率&#x2F;总像素数  即 <strong>n</strong>&#x2F;<strong>K</strong>,我们得到分布概率<strong>m</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gray_leave</span>:  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>       <span class="hljs-number">2</span>       <span class="hljs-number">3</span>      <span class="hljs-number">4</span>     <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span><br>         <span class="hljs-attribute">n</span>:  <span class="hljs-number">0</span>  <span class="hljs-number">3</span>       <span class="hljs-number">3</span>       <span class="hljs-number">6</span>      <span class="hljs-number">4</span>     <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br>         <span class="hljs-attribute">m</span>:  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">1875</span>  <span class="hljs-number">0</span>.<span class="hljs-number">1875</span>  <span class="hljs-number">0</span>.<span class="hljs-number">375</span>  <span class="hljs-number">0</span>.<span class="hljs-number">25</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>计算累积分布函数（CDF)的值<strong>L</strong>  即累加 第二项的值&#x3D;前两项的和</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gray_leave</span>:  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>       <span class="hljs-number">2</span>       <span class="hljs-number">3</span>      <span class="hljs-number">4</span>     <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span><br>         <span class="hljs-attribute">n</span>:  <span class="hljs-number">0</span>  <span class="hljs-number">3</span>       <span class="hljs-number">3</span>       <span class="hljs-number">6</span>      <span class="hljs-number">4</span>     <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br>         <span class="hljs-attribute">m</span>:  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">1875</span>  <span class="hljs-number">0</span>.<span class="hljs-number">1875</span>  <span class="hljs-number">0</span>.<span class="hljs-number">375</span>  <span class="hljs-number">0</span>.<span class="hljs-number">25</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br>         <span class="hljs-attribute">L</span>:  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">1875</span>  <span class="hljs-number">0</span>.<span class="hljs-number">375</span>   <span class="hljs-number">0</span>.<span class="hljs-number">75</span>   <span class="hljs-number">1</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>映射到新灰度级</p><p>出现的灰度等级有 1,2,3,4</p><p>新映射灰度等S1 &#x3D;7*0.1875 &#x3D;1.3125 ≈1</p><p>​S2 &#x3D;7*0.375 &#x3D;2.625 ≈ 3</p><p>​S3 &#x3D;7*0.75 &#x3D;5.25 ≈ 5</p><p>​S4 &#x3D;7*1 &#x3D;7</p><p>新图像矩阵为</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span> <span class="hljs-number">7</span>  <span class="hljs-number">5</span>  <span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span> <span class="hljs-number">5</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br><span class="hljs-symbol">7 </span> <span class="hljs-number">3</span>  <span class="hljs-number">7</span>  <span class="hljs-number">3</span><br><span class="hljs-symbol">5 </span> <span class="hljs-number">5</span>  <span class="hljs-number">7</span>  <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p><a href="https://blog.csdn.net/weixin_50557558/article/details/141103000">c++版opencv长文指南_c++ opencv-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_47489229/article/details/126207719">OpenCV图像处理基础(C++版)_opencv c++-CSDN博客</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>c++,opencv</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片上传测试</title>
    <link href="/ControllerTX/2025/02/18/test/"/>
    <url>/ControllerTX/2025/02/18/test/</url>
    
    <content type="html"><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><img src="/ControllerTX/2025/02/18/test/girl.jpg" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo学习</title>
    <link href="/ControllerTX/2025/02/18/Hexo%E5%AD%A6%E4%B9%A0/"/>
    <url>/ControllerTX/2025/02/18/Hexo%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo学习"><a href="#Hexo学习" class="headerlink" title="Hexo学习"></a>Hexo学习</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>在每次更新内容前最好先执行以下命令,目的是为了清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure></li><li><p>生成静态文件,我理解为编译</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span>  <br></code></pre></td></tr></table></figure><p>可简写</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure></li><li><p>部署 </p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>可简写</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure></li><li><p>静态部署,即在本地展示效果,不会部署到服务器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo <span class="hljs-keyword">static</span><br></code></pre></td></tr></table></figure><p>可简写</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo s<br></code></pre></td></tr></table></figure></li></ol><h2 id="解决图片上传显示问题"><a href="#解决图片上传显示问题" class="headerlink" title="解决图片上传显示问题"></a>解决图片上传显示问题</h2><p>1.在 _config.yml文件中将post_asset_folder:属性设置为true</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">post_asset_folder: true<br></code></pre></td></tr></table></figure><p>2.在创建新博客文章时使用</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;博客文章名&quot;</span><br></code></pre></td></tr></table></figure><p>这样会在source&#x2F;_posts&#x2F;下创建一个与博客文章名同名的空文件夹,将图片存放在此文件夹中即可.</p><p><strong>或者</strong>不用第二步的命令,自行手动创建同名文件夹</p><p>3.图片的引用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片名]</span>(图片路径)<br></code></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D; 注意 &#x3D;&#x3D; 此时图片路径只需要填写  文件夹名&#x2F;图片名</p></blockquote><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote><p>(<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a>)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一个博客</title>
    <link href="/ControllerTX/2025/02/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <url>/ControllerTX/2025/02/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="我的第一个博客-—–"><a href="#我的第一个博客-—–" class="headerlink" title="我的第一个博客 —–"></a>我的第一个博客 —–</h1><h3 id="拯救是自己的事…"><a href="#拯救是自己的事…" class="headerlink" title="拯救是自己的事…."></a>拯救是自己的事….</h3><p>2025年2月16日,迷茫还是像海水一样袭来…..但,拯救–从来都是自己的事.</p><img src="/ControllerTX/2025/02/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/1.jpg" class="" width="1">]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心情</tag>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
